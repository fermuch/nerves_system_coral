From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: System Builder <builder@nerves-project.org>
Date: Wed, 30 Jul 2025 17:00:00 +0000
Subject: [PATCH] Fix all remaining kernel 5.4 compatibility issues

This comprehensive patch fixes the final kernel 5.4 compatibility issues:

Timer API fixes in vos_timer.c:
- Fix vos_timer_init function to use timer_setup() instead of 
  init_timer_deferrable/init_timer for kernel 5.4+
- Remove invalid timer.data assignment for kernel 5.4+
- Add conditional compilation to maintain backward compatibility

Time API fixes in vos_timer.c:
- Fix vos_get_time_of_the_day_in_hr_min_sec_usec function to use 
  ktime_get_real_ts64() instead of do_gettimeofday() for kernel 5.4+
- Add proper timespec64 to timeval conversion

Variable declaration fix in vos_packet.c:
- Add missing struct timespec64 ts declaration in 
  vos_pkt_trace_buf_update function to resolve 'ts' undeclared error

This resolves all remaining compilation errors for kernel 5.4 compatibility.

Signed-off-by: System Builder <builder@nerves-project.org>
---
 CORE/VOSS/src/vos_packet.c |  3 +++
 CORE/VOSS/src/vos_timer.c  | 25 +++++++++++++++++++++----
 2 files changed, 24 insertions(+), 4 deletions(-)--- a/CORE/VOSS/src/vos_timer.c	2025-07-30 15:32:19.270222834 -0300
+++ b/CORE/VOSS/src/vos_timer.c	2025-07-30 15:33:20.946593449 -0300
@@ -487,12 +487,19 @@
    // set the various members of the timer structure
    // with arguments passed or with default values
    spin_lock_init(&timer->platformInfo.spinlock);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0))
+   if (VOS_TIMER_TYPE_SW == timerType)
+      timer_setup(&(timer->platformInfo.Timer), vos_linux_timer_callback, TIMER_DEFERRABLE);
+   else
+      timer_setup(&(timer->platformInfo.Timer), vos_linux_timer_callback, 0);
+#else
    if (VOS_TIMER_TYPE_SW == timerType)
       init_timer_deferrable(&(timer->platformInfo.Timer));
    else
       init_timer(&(timer->platformInfo.Timer));
    timer->platformInfo.Timer.function = vos_linux_timer_callback;
    timer->platformInfo.Timer.data = (unsigned long)timer;
+#endif
    timer->callback = callback;
    timer->userData = userData;
    timer->type = timerType;
@@ -925,12 +932,21 @@
 
 void vos_get_time_of_the_day_in_hr_min_sec_usec(char *tbuf, int len)
 {
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0))
+       struct timespec64 ts;
+#endif
        struct timeval tv;
        struct rtc_time tm;
        unsigned long local_time;
 
        /* Format the Log time R#: [hr:min:sec.microsec] */
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0))
+       ktime_get_real_ts64(&ts);
+       tv.tv_sec = ts.tv_sec;
+       tv.tv_usec = ts.tv_nsec / 1000;
+#else
        do_gettimeofday(&tv);
+#endif
        /* Convert rtc to local time */
        local_time = (u32)(tv.tv_sec - (sys_tz.tz_minuteswest * 60));
        rtc_time_to_tm(local_time, &tm);
--- a/CORE/VOSS/src/vos_packet.c	2025-07-30 15:32:19.283556103 -0300
+++ b/CORE/VOSS/src/vos_packet.c	2025-07-30 15:33:45.703141112 -0300
@@ -331,6 +331,9 @@
 )
 {
    v_U32_t slot;
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0))
+   struct timespec64 ts;
+#endif
    struct timeval tv;
 
    VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_INFO,
---
