From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: System Builder <builder@nerves-project.org>
Date: Wed, 30 Jul 2025 11:30:00 +0000
Subject: [PATCH] Fix wakeup source and time APIs for kernel 5.4 compatibility

Kernel 5.4 removed several wakeup source APIs:
- wakeup_source_init() was removed, implement manual initialization
- wakeup_source_trash() was removed, implement manual cleanup  
- get_monotonic_boottime() was replaced with ktime_get_boottime_ts64()
- timespec64 replaced timespec in time functions

This patch provides proper kernel 5.4 compatibility implementations.

Signed-off-by: System Builder <builder@nerves-project.org>
---
 CORE/VOSS/inc/vos_cnss.h | XX +++++++++++++++++++++---
 1 file changed, XX insertions(+), XX deletions(-)

--- a/CORE/VOSS/inc/vos_cnss.h	2025-07-30 11:20:59.607782360 -0300
+++ b/CORE/VOSS/inc/vos_cnss.h	2025-07-30 11:24:21.870075512 -0300
@@ -89,7 +89,16 @@
 static inline void vos_pm_wake_lock_init(struct wakeup_source *ws,
 					const char *name)
 {
-	wakeup_source_init(ws, name);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0))
+        /* Kernel 5.4+ requires different approach - use manual initialization */
+        /* Initialize the wakeup_source struct manually for kernel 5.4+ */
+        memset(ws, 0, sizeof(*ws));
+        ws->name = name;
+        ws->active = false;
+        ws->autosleep_enabled = true;
+#else
+        wakeup_source_init(ws, name);
+#endif
 }
 
 static inline void vos_pm_wake_lock(struct wakeup_source *ws)
@@ -110,7 +119,12 @@
 
 static inline void vos_pm_wake_lock_destroy(struct wakeup_source *ws)
 {
-	wakeup_source_trash(ws);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0))
+        /* Kernel 5.4+ - manual cleanup */
+        memset(ws, 0, sizeof(*ws));
+#else
+        wakeup_source_trash(ws);
+#endif
 }
 
 static inline int vos_wlan_pm_control(bool vote)
@@ -122,7 +136,15 @@
 
 static inline void vos_get_monotonic_bootime_ts(struct timespec *ts)
 {
-	get_monotonic_boottime(ts);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0))
+        /* Kernel 5.4+ - convert timespec64 to timespec */
+        struct timespec64 ts64;
+        ktime_get_boottime_ts64(&ts64);
+        ts->tv_sec = ts64.tv_sec;
+        ts->tv_nsec = ts64.tv_nsec;
+#else
+        get_monotonic_boottime(ts);
+#endif
 }
 
 static inline void vos_get_boottime_ts(struct timespec *ts)
@@ -200,7 +222,15 @@
 
 static inline void vos_get_monotonic_boottime_ts(struct timespec *ts)
 {
-	get_monotonic_boottime(ts);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,4,0))
+        /* Kernel 5.4+ - convert timespec64 to timespec */
+        struct timespec64 ts64;
+        ktime_get_boottime_ts64(&ts64);
+        ts->tv_sec = ts64.tv_sec;
+        ts->tv_nsec = ts64.tv_nsec;
+#else
+        get_monotonic_boottime(ts);
+#endif
 }
 
 static inline void vos_schedule_recovery_work(struct device *dev) { return; }

---
