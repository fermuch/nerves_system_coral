# --------------------------------------------------------------------------
#  Google Coral Dev Board – Nerves A/B layout
# --------------------------------------------------------------------------

require-fwup-version = "1.0.0"

# --------------------------------------------------------------------------
#  Metadata (override from environment if you like)
# --------------------------------------------------------------------------
define(NERVES_FW_PRODUCT,      "Nerves Firmware")
define(NERVES_FW_DESCRIPTION,  "")
define(NERVES_FW_VERSION,      "${NERVES_SDK_VERSION}")
define(NERVES_FW_PLATFORM,     "google_coral_dev")
define(NERVES_FW_ARCHITECTURE, "arm")
define(NERVES_FW_AUTHOR,       "Fernando Mumbach")

# --------------------------------------------------------------------------
#  Convenience paths
# --------------------------------------------------------------------------
define(NERVES_FW_DEVPATH,                       "/dev/mmcblk1")
define(NERVES_FW_APPLICATION_PART0_DEVPATH,     "/dev/mmcblk1p3")
define(NERVES_FW_APPLICATION_PART0_FSTYPE,      "f2fs")
define(NERVES_FW_APPLICATION_PART0_TARGET,      "/root")

define(NERVES_PROVISIONING,
       "${NERVES_SYSTEM}/images/fwup_include/provisioning.conf")
define(ROOTFS, "${NERVES_SYSTEM}/images/rootfs.squashfs")

# --------------------------------------------------------------------------
#  Geometry (all numbers are 512-byte sectors)
# --------------------------------------------------------------------------
define(UBOOT_OFFSET,       66)          # imx8-boot-sd.bin, unchanged
define(UBOOT_ENV_OFFSET,   8192)        # 4 MiB
define(UBOOT_ENV_COUNT,    256)         # 128 KiB

define(BOOT_PART_OFFSET,   16384)       # 8 MiB
define(BOOT_PART_COUNT,    131072)      # 64 MiB

define-eval(ROOTFS_A_PART_OFFSET, "${BOOT_PART_OFFSET} + ${BOOT_PART_COUNT}")
define(ROOTFS_A_PART_COUNT, 245760)     # 120 MiB

define-eval(ROOTFS_B_PART_OFFSET,
           "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, ${ROOTFS_A_PART_COUNT})   # another 120 MiB

define-eval(APP_PART_OFFSET,
           "${ROOTFS_B_PART_OFFSET} + ${ROOTFS_B_PART_COUNT}")
define(APP_PART_COUNT,     1048576)     # 512 MiB placeholder (grow as needed)

# --------------------------------------------------------------------------
#  File resources
# --------------------------------------------------------------------------
file-resource imx8-boot-sd.bin { host-path = "${NERVES_SYSTEM}/images/imx8-boot-sd.bin" }
file-resource uboot-env.bin    { host-path = "${NERVES_SYSTEM}/images/uboot-env.bin"   }
file-resource boot.vfat        { host-path = "${NERVES_SYSTEM}/images/boot.vfat"       }
file-resource rootfs.img       {
    host-path          = ${ROOTFS}
    assert-size-lte    = ${ROOTFS_A_PART_COUNT}        # safety check
}

# --------------------------------------------------------------------------
#  Partition table (identical to fdisk -l above + new empty slots)
# --------------------------------------------------------------------------
mbr mbr {
    partition 0 {                # Boot  (FAT32, 64 MiB)
        block-offset = ${BOOT_PART_OFFSET}
        block-count  = ${BOOT_PART_COUNT}
        type         = 0x0c
        boot         = true
    }
    partition 1 {                # Rootfs A (squashfs, 120 MiB)
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count  = ${ROOTFS_A_PART_COUNT}
        type         = 0x83
    }
    partition 2 {                # Rootfs B (squashfs, empty for now)
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count  = ${ROOTFS_B_PART_COUNT}
        type         = 0x83
    }
    partition 3 {                # Application data (f2fs, blank)
        block-offset = ${APP_PART_OFFSET}
        block-count  = ${APP_PART_COUNT}
        type         = 0x83
    }
}

# --------------------------------------------------------------------------
#  U-Boot environment location (raw, not inside a partition)
# --------------------------------------------------------------------------
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count  = ${UBOOT_ENV_COUNT}
}

# --------------------------------------------------------------------------
#  1) Factory image  (writes everything)
# --------------------------------------------------------------------------
task complete {
    require-unmounted-destination = true

    on-init {
        mbr_write(mbr)
    }

    on-resource imx8-boot-sd.bin { raw_write(${UBOOT_OFFSET}) }

    on-resource uboot-env.bin {
        raw_write(${UBOOT_ENV_OFFSET})

        include("${NERVES_PROVISIONING}")

        # Generic Nerves metadata (active partition = A)
        uboot_setenv(uboot-env, "nerves_fw_active", "a")
        uboot_setenv(uboot-env, "nerves_fw_validated", "1")
        uboot_setenv(uboot-env, "nerves_fw_booted",    "0")
        uboot_setenv(uboot-env, "nerves_fw_devpath",   ${NERVES_FW_DEVPATH})

        # Partition-specific metadata for A
        uboot_setenv(uboot-env,
            "a.nerves_fw_application_part0_devpath",
            ${NERVES_FW_APPLICATION_PART0_DEVPATH})
        uboot_setenv(uboot-env,
            "a.nerves_fw_application_part0_fstype",
            ${NERVES_FW_APPLICATION_PART0_FSTYPE})
        uboot_setenv(uboot-env,
            "a.nerves_fw_application_part0_target",
            ${NERVES_FW_APPLICATION_PART0_TARGET})

        # Product metadata
        uboot_setenv(uboot-env, "a.nerves_fw_product",        ${NERVES_FW_PRODUCT})
        uboot_setenv(uboot-env, "a.nerves_fw_description",    ${NERVES_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "a.nerves_fw_version",        ${NERVES_FW_VERSION})
        uboot_setenv(uboot-env, "a.nerves_fw_platform",       ${NERVES_FW_PLATFORM})
        uboot_setenv(uboot-env, "a.nerves_fw_architecture",   ${NERVES_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.nerves_fw_author",         ${NERVES_FW_AUTHOR})
        uboot_setenv(uboot-env, "a.nerves_fw_uuid",           "${FWUP_META_UUID}")
    }

    on-resource boot.vfat  { raw_write(${BOOT_PART_OFFSET}) }
    on-resource rootfs.img { raw_write(${ROOTFS_A_PART_OFFSET}) }

    on-finish {
        # Zero out unused areas so stale data can’t confuse first boot
        raw_memset(${ROOTFS_B_PART_OFFSET}, 256, 0xff)
        raw_memset(${APP_PART_OFFSET},      256, 0xff)
    }
}

# --------------------------------------------------------------------------
# 2) Upgrade tasks (A ↔ B)  – identical to the example you posted,
#    only the offsets/counts changed to match the 120 MiB layout.
# --------------------------------------------------------------------------
# -- upgrade.a --------------------------------------------------------------
task upgrade.a {
    require-uboot-variable(uboot-env, "nerves_fw_active", "b")
    require-uboot-variable(uboot-env, "nerves_fw_validated", "1")
    require-uboot-variable(uboot-env, "b.nerves_fw_platform",     "${NERVES_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "b.nerves_fw_architecture", "${NERVES_FW_ARCHITECTURE}")

    on-init {
        info("Upgrading partition A")
        uboot_unsetenv(uboot-env, "a.nerves_fw_version")
        uboot_unsetenv(uboot-env, "a.nerves_fw_platform")
        uboot_unsetenv(uboot-env, "a.nerves_fw_architecture")
        uboot_unsetenv(uboot-env, "a.nerves_fw_uuid")
        trim(${ROOTFS_A_PART_OFFSET}, ${ROOTFS_A_PART_COUNT})
    }

    on-resource rootfs.img {
        delta-source-raw-offset = ${ROOTFS_B_PART_OFFSET}
        delta-source-raw-count  = ${ROOTFS_B_PART_COUNT}
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        uboot_setenv(uboot-env,
            "a.nerves_fw_application_part0_devpath",
            ${NERVES_FW_APPLICATION_PART0_DEVPATH})
        uboot_setenv(uboot-env,
            "a.nerves_fw_application_part0_fstype",
            ${NERVES_FW_APPLICATION_PART0_FSTYPE})
        uboot_setenv(uboot-env,
            "a.nerves_fw_application_part0_target",
            ${NERVES_FW_APPLICATION_PART0_TARGET})

        uboot_setenv(uboot-env, "a.nerves_fw_product",        ${NERVES_FW_PRODUCT})
        uboot_setenv(uboot-env, "a.nerves_fw_description",    ${NERVES_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "a.nerves_fw_version",        ${NERVES_FW_VERSION})
        uboot_setenv(uboot-env, "a.nerves_fw_platform",       ${NERVES_FW_PLATFORM})
        uboot_setenv(uboot-env, "a.nerves_fw_architecture",   ${NERVES_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.nerves_fw_author",         ${NERVES_FW_AUTHOR})
        uboot_setenv(uboot-env, "a.nerves_fw_uuid",           "${FWUP_META_UUID}")

        uboot_setenv(uboot-env, "nerves_fw_active",   "a")
        uboot_setenv(uboot-env, "nerves_fw_validated","0")
        uboot_setenv(uboot-env, "nerves_fw_booted",   "0")
    }
}
# -- upgrade.b --------------------------------------------------------------
task upgrade.b {
    require-uboot-variable(uboot-env, "nerves_fw_active", "a")
    require-uboot-variable(uboot-env, "nerves_fw_validated", "1")
    require-uboot-variable(uboot-env, "a.nerves_fw_platform",     "${NERVES_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "a.nerves_fw_architecture", "${NERVES_FW_ARCHITECTURE}")

    on-init {
        info("Upgrading partition B")
        uboot_unsetenv(uboot-env, "b.nerves_fw_version")
        uboot_unsetenv(uboot-env, "b.nerves_fw_platform")
        uboot_unsetenv(uboot-env, "b.nerves_fw_architecture")
        uboot_unsetenv(uboot-env, "b.nerves_fw_uuid")
        trim(${ROOTFS_B_PART_OFFSET}, ${ROOTFS_B_PART_COUNT})
    }

    on-resource rootfs.img {
        delta-source-raw-offset = ${ROOTFS_A_PART_OFFSET}
        delta-source-raw-count  = ${ROOTFS_A_PART_COUNT}
        raw_write(${ROOTFS_B_PART_OFFSET})
    }

    on-finish {
        uboot_setenv(uboot-env,
            "b.nerves_fw_application_part0_devpath",
            ${NERVES_FW_APPLICATION_PART0_DEVPATH})
        uboot_setenv(uboot-env,
            "b.nerves_fw_application_part0_fstype",
            ${NERVES_FW_APPLICATION_PART0_FSTYPE})
        uboot_setenv(uboot-env,
            "b.nerves_fw_application_part0_target",
            ${NERVES_FW_APPLICATION_PART0_TARGET})

        uboot_setenv(uboot-env, "b.nerves_fw_product",        ${NERVES_FW_PRODUCT})
        uboot_setenv(uboot-env, "b.nerves_fw_description",    ${NERVES_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "b.nerves_fw_version",        ${NERVES_FW_VERSION})
        uboot_setenv(uboot-env, "b.nerves_fw_platform",       ${NERVES_FW_PLATFORM})
        uboot_setenv(uboot-env, "b.nerves_fw_architecture",   ${NERVES_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "b.nerves_fw_author",         ${NERVES_FW_AUTHOR})
        uboot_setenv(uboot-env, "b.nerves_fw_uuid",           "${FWUP_META_UUID}")

        uboot_setenv(uboot-env, "nerves_fw_active",   "b")
        uboot_setenv(uboot-env, "nerves_fw_validated","0")
        uboot_setenv(uboot-env, "nerves_fw_booted",   "0")
    }
}

# -- guard tasks ------------------------------------------------------------
task upgrade.unvalidated { require-uboot-variable(uboot-env, "nerves_fw_validated", "0") on-init { error("Please validate the running firmware before upgrading it again.") } }
task upgrade.unexpected  { require-uboot-variable(uboot-env, "a.nerves_fw_platform", "${NERVES_FW_PLATFORM}") require-uboot-variable(uboot-env, "a.nerves_fw_architecture","${NERVES_FW_ARCHITECTURE}") on-init { error("Unexpected firmware layout on target") } }
task upgrade.wrongplatform { on-init { error("Expecting platform=${NERVES_FW_PLATFORM} architecture=${NERVES_FW_ARCHITECTURE}") } }

# Provisioning (unchanged)
task provision             { require-uboot-variable(uboot-env, "a.nerves_fw_platform", "${NERVES_FW_PLATFORM}") require-uboot-variable(uboot-env, "a.nerves_fw_architecture","${NERVES_FW_ARCHITECTURE}") on-init { include("${NERVES_PROVISIONING}") } }
task provision.wrongplatform { on-init { error("Expecting platform=${NERVES_FW_PLATFORM} architecture=${NERVES_FW_ARCHITECTURE}") } }
